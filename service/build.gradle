plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id "com.gorylenko.gradle-git-properties" version '2.4.1'
    id 'net.researchgate.release' version '3.0.0'
    id "com.github.spotbugs" version '5.0.10'
    id 'jacoco'
    id 'checkstyle'
}

sourceCompatibility = '17'
description = 'Hospitality Menu Service is a project to manage hospitality services menus such as restaurants, bar, food-truck, etc.'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'io.micrometer:micrometer-registry-prometheus:1.9.3'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-inline:4.7.0'
}

springBoot {
    buildInfo()
}

release {
    git {
        requireBranch = 'main'
    }
}

processResources {
    expand(project.properties)
}

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

tasks.named('bootJar') {
    archiveClassifier = 'boot'
}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = '0.8.8'
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            // Enforces that 100% of the lines are executed during tests
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
}
